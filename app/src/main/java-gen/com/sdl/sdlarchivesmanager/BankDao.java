package com.sdl.sdlarchivesmanager;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sdl.sdlarchivesmanager.Bank;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANK".
*/
public class BankDao extends AbstractDao<Bank, Long> {

    public static final String TABLENAME = "BANK";

    /**
     * Properties of entity Bank.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Bank_ClientNum = new Property(1, String.class, "Bank_ClientNum", false, "BANK__CLIENT_NUM");
        public final static Property Bank_Num = new Property(2, String.class, "Bank_Num", false, "BANK__NUM");
        public final static Property Bank_Name = new Property(3, String.class, "Bank_Name", false, "BANK__NAME");
        public final static Property Bank_Name2 = new Property(4, String.class, "Bank_Name2", false, "BANK__NAME2");
        public final static Property Bank_Phone = new Property(5, String.class, "Bank_Phone", false, "BANK__PHONE");
        public final static Property Bank_Invoice = new Property(6, String.class, "Bank_Invoice", false, "BANK__INVOICE");
    };


    public BankDao(DaoConfig config) {
        super(config);
    }
    
    public BankDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BANK__CLIENT_NUM\" TEXT," + // 1: Bank_ClientNum
                "\"BANK__NUM\" TEXT," + // 2: Bank_Num
                "\"BANK__NAME\" TEXT," + // 3: Bank_Name
                "\"BANK__NAME2\" TEXT," + // 4: Bank_Name2
                "\"BANK__PHONE\" TEXT," + // 5: Bank_Phone
                "\"BANK__INVOICE\" TEXT);"); // 6: Bank_Invoice
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Bank entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Bank_ClientNum = entity.getBank_ClientNum();
        if (Bank_ClientNum != null) {
            stmt.bindString(2, Bank_ClientNum);
        }
 
        String Bank_Num = entity.getBank_Num();
        if (Bank_Num != null) {
            stmt.bindString(3, Bank_Num);
        }
 
        String Bank_Name = entity.getBank_Name();
        if (Bank_Name != null) {
            stmt.bindString(4, Bank_Name);
        }
 
        String Bank_Name2 = entity.getBank_Name2();
        if (Bank_Name2 != null) {
            stmt.bindString(5, Bank_Name2);
        }
 
        String Bank_Phone = entity.getBank_Phone();
        if (Bank_Phone != null) {
            stmt.bindString(6, Bank_Phone);
        }
 
        String Bank_Invoice = entity.getBank_Invoice();
        if (Bank_Invoice != null) {
            stmt.bindString(7, Bank_Invoice);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Bank readEntity(Cursor cursor, int offset) {
        Bank entity = new Bank( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Bank_ClientNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Bank_Num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Bank_Name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Bank_Name2
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Bank_Phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // Bank_Invoice
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Bank entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBank_ClientNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBank_Num(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBank_Name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBank_Name2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBank_Phone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBank_Invoice(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Bank entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Bank entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
