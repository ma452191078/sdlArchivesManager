package com.sdl.sdlarchivesmanager;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sdl.sdlarchivesmanager.Client;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLIENT".
*/
public class ClientDao extends AbstractDao<Client, Long> {

    public static final String TABLENAME = "CLIENT";

    /**
     * Properties of entity Client.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Client_Num = new Property(1, String.class, "Client_Num", false, "CLIENT__NUM");
        public final static Property Client_Name = new Property(2, String.class, "Client_Name", false, "CLIENT__NAME");
        public final static Property Client_Owner = new Property(3, String.class, "Client_Owner", false, "CLIENT__OWNER");
        public final static Property Client_Type = new Property(4, String.class, "Client_Type", false, "CLIENT__TYPE");
        public final static Property Client_Level = new Property(5, String.class, "Client_Level", false, "CLIENT__LEVEL");
        public final static Property Client_Uplevel = new Property(6, String.class, "Client_Uplevel", false, "CLIENT__UPLEVEL");
        public final static Property Client_Phone = new Property(7, String.class, "Client_Phone", false, "CLIENT__PHONE");
        public final static Property Client_Province = new Property(8, String.class, "Client_Province", false, "CLIENT__PROVINCE");
        public final static Property Client_City = new Property(9, String.class, "Client_City", false, "CLIENT__CITY");
        public final static Property Client_Country = new Property(10, String.class, "Client_Country", false, "CLIENT__COUNTRY");
        public final static Property Client_Town = new Property(11, String.class, "Client_Town", false, "CLIENT__TOWN");
        public final static Property Client_Address = new Property(12, String.class, "Client_Address", false, "CLIENT__ADDRESS");
        public final static Property Client_LngLat = new Property(13, String.class, "Client_LngLat", false, "CLIENT__LNG_LAT");
        public final static Property Client_Contract = new Property(14, String.class, "Client_Contract", false, "CLIENT__CONTRACT");
        public final static Property Client_IdCardF = new Property(15, String.class, "Client_IdCardF", false, "CLIENT__ID_CARD_F");
        public final static Property Client_IdCardB = new Property(16, String.class, "Client_IdCardB", false, "CLIENT__ID_CARD_B");
        public final static Property Client_Licence = new Property(17, String.class, "Client_Licence", false, "CLIENT__LICENCE");
    };


    public ClientDao(DaoConfig config) {
        super(config);
    }
    
    public ClientDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLIENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CLIENT__NUM\" TEXT NOT NULL ," + // 1: Client_Num
                "\"CLIENT__NAME\" TEXT," + // 2: Client_Name
                "\"CLIENT__OWNER\" TEXT," + // 3: Client_Owner
                "\"CLIENT__TYPE\" TEXT," + // 4: Client_Type
                "\"CLIENT__LEVEL\" TEXT," + // 5: Client_Level
                "\"CLIENT__UPLEVEL\" TEXT," + // 6: Client_Uplevel
                "\"CLIENT__PHONE\" TEXT," + // 7: Client_Phone
                "\"CLIENT__PROVINCE\" TEXT," + // 8: Client_Province
                "\"CLIENT__CITY\" TEXT," + // 9: Client_City
                "\"CLIENT__COUNTRY\" TEXT," + // 10: Client_Country
                "\"CLIENT__TOWN\" TEXT," + // 11: Client_Town
                "\"CLIENT__ADDRESS\" TEXT," + // 12: Client_Address
                "\"CLIENT__LNG_LAT\" TEXT," + // 13: Client_LngLat
                "\"CLIENT__CONTRACT\" TEXT," + // 14: Client_Contract
                "\"CLIENT__ID_CARD_F\" TEXT," + // 15: Client_IdCardF
                "\"CLIENT__ID_CARD_B\" TEXT," + // 16: Client_IdCardB
                "\"CLIENT__LICENCE\" TEXT);"); // 17: Client_Licence
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLIENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Client entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getClient_Num());
 
        String Client_Name = entity.getClient_Name();
        if (Client_Name != null) {
            stmt.bindString(3, Client_Name);
        }
 
        String Client_Owner = entity.getClient_Owner();
        if (Client_Owner != null) {
            stmt.bindString(4, Client_Owner);
        }
 
        String Client_Type = entity.getClient_Type();
        if (Client_Type != null) {
            stmt.bindString(5, Client_Type);
        }
 
        String Client_Level = entity.getClient_Level();
        if (Client_Level != null) {
            stmt.bindString(6, Client_Level);
        }
 
        String Client_Uplevel = entity.getClient_Uplevel();
        if (Client_Uplevel != null) {
            stmt.bindString(7, Client_Uplevel);
        }
 
        String Client_Phone = entity.getClient_Phone();
        if (Client_Phone != null) {
            stmt.bindString(8, Client_Phone);
        }
 
        String Client_Province = entity.getClient_Province();
        if (Client_Province != null) {
            stmt.bindString(9, Client_Province);
        }
 
        String Client_City = entity.getClient_City();
        if (Client_City != null) {
            stmt.bindString(10, Client_City);
        }
 
        String Client_Country = entity.getClient_Country();
        if (Client_Country != null) {
            stmt.bindString(11, Client_Country);
        }
 
        String Client_Town = entity.getClient_Town();
        if (Client_Town != null) {
            stmt.bindString(12, Client_Town);
        }
 
        String Client_Address = entity.getClient_Address();
        if (Client_Address != null) {
            stmt.bindString(13, Client_Address);
        }
 
        String Client_LngLat = entity.getClient_LngLat();
        if (Client_LngLat != null) {
            stmt.bindString(14, Client_LngLat);
        }
 
        String Client_Contract = entity.getClient_Contract();
        if (Client_Contract != null) {
            stmt.bindString(15, Client_Contract);
        }
 
        String Client_IdCardF = entity.getClient_IdCardF();
        if (Client_IdCardF != null) {
            stmt.bindString(16, Client_IdCardF);
        }
 
        String Client_IdCardB = entity.getClient_IdCardB();
        if (Client_IdCardB != null) {
            stmt.bindString(17, Client_IdCardB);
        }
 
        String Client_Licence = entity.getClient_Licence();
        if (Client_Licence != null) {
            stmt.bindString(18, Client_Licence);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Client readEntity(Cursor cursor, int offset) {
        Client entity = new Client( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // Client_Num
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Client_Name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Client_Owner
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Client_Type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Client_Level
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Client_Uplevel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Client_Phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Client_Province
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Client_City
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Client_Country
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Client_Town
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Client_Address
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // Client_LngLat
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // Client_Contract
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Client_IdCardF
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // Client_IdCardB
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // Client_Licence
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Client entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClient_Num(cursor.getString(offset + 1));
        entity.setClient_Name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClient_Owner(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClient_Type(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClient_Level(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClient_Uplevel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setClient_Phone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setClient_Province(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setClient_City(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setClient_Country(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setClient_Town(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setClient_Address(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setClient_LngLat(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setClient_Contract(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setClient_IdCardF(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setClient_IdCardB(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setClient_Licence(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Client entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Client entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
