package com.sdl.sdlarchivesmanager;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sdl.sdlarchivesmanager.Address;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADDRESS".
*/
public class AddressDao extends AbstractDao<Address, Long> {

    public static final String TABLENAME = "ADDRESS";

    /**
     * Properties of entity Address.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Addr_Code = new Property(1, String.class, "Addr_Code", false, "ADDR__CODE");
        public final static Property Addr_Name = new Property(2, String.class, "Addr_Name", false, "ADDR__NAME");
        public final static Property Addr_UpCode = new Property(3, String.class, "Addr_UpCode", false, "ADDR__UP_CODE");
        public final static Property Addr_Level = new Property(4, String.class, "Addr_Level", false, "ADDR__LEVEL");
    };


    public AddressDao(DaoConfig config) {
        super(config);
    }
    
    public AddressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADDRESS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ADDR__CODE\" TEXT," + // 1: Addr_Code
                "\"ADDR__NAME\" TEXT," + // 2: Addr_Name
                "\"ADDR__UP_CODE\" TEXT," + // 3: Addr_UpCode
                "\"ADDR__LEVEL\" TEXT);"); // 4: Addr_Level
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADDRESS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Address entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Addr_Code = entity.getAddr_Code();
        if (Addr_Code != null) {
            stmt.bindString(2, Addr_Code);
        }
 
        String Addr_Name = entity.getAddr_Name();
        if (Addr_Name != null) {
            stmt.bindString(3, Addr_Name);
        }
 
        String Addr_UpCode = entity.getAddr_UpCode();
        if (Addr_UpCode != null) {
            stmt.bindString(4, Addr_UpCode);
        }
 
        String Addr_Level = entity.getAddr_Level();
        if (Addr_Level != null) {
            stmt.bindString(5, Addr_Level);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Address readEntity(Cursor cursor, int offset) {
        Address entity = new Address( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Addr_Code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Addr_Name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Addr_UpCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // Addr_Level
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Address entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAddr_Code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddr_Name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddr_UpCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddr_Level(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Address entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Address entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
